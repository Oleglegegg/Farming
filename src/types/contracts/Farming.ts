/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FarmingInterface extends utils.Interface {
  functions: {
    "HUNDRED_PERCENT()": FunctionFragment;
    "amountOfEpochs()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "percentage()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tokensLeft()": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HUNDRED_PERCENT"
      | "amountOfEpochs"
      | "claimRewards"
      | "deposit"
      | "epochDuration"
      | "initialize"
      | "initialized"
      | "owner"
      | "percentage"
      | "rewardToken"
      | "stakingToken"
      | "startTime"
      | "tokensLeft"
      | "users"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountOfEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountOfEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "percentage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256)": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ClaimedEventObject {
  addr: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface DepositedEventObject {
  addr: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface WithdrawnEventObject {
  addr: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Farming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountOfEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _totalAmount: PromiseOrValue<BigNumberish>,
      _percentage: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _amountOfEpochs: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        depositTime: BigNumber;
        claimed: boolean;
        withdraw: boolean;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  amountOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _totalAmount: PromiseOrValue<BigNumberish>,
    _percentage: PromiseOrValue<BigNumberish>,
    _epochDuration: PromiseOrValue<BigNumberish>,
    _amountOfEpochs: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentage(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokensLeft(overrides?: CallOverrides): Promise<BigNumber>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean] & {
      amount: BigNumber;
      depositTime: BigNumber;
      claimed: boolean;
      withdraw: boolean;
    }
  >;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    amountOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _totalAmount: PromiseOrValue<BigNumberish>,
      _percentage: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _amountOfEpochs: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentage(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokensLeft(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        depositTime: BigNumber;
        claimed: boolean;
        withdraw: boolean;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256)"(addr?: null, amount?: null): ClaimedEventFilter;
    Claimed(addr?: null, amount?: null): ClaimedEventFilter;

    "Deposited(address,uint256)"(
      addr?: null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(addr?: null, amount?: null): DepositedEventFilter;

    "Withdrawn(address,uint256)"(
      addr?: null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(addr?: null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    amountOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _totalAmount: PromiseOrValue<BigNumberish>,
      _percentage: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _amountOfEpochs: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentage(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokensLeft(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountOfEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _totalAmount: PromiseOrValue<BigNumberish>,
      _percentage: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _amountOfEpochs: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
