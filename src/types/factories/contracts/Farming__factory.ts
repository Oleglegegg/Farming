/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Farming, FarmingInterface } from "../../contracts/Farming";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "HUNDRED_PERCENT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amountOfEpochs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "epochDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_percentage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_epochDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOfEpochs",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "percentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokensLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "depositTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "withdraw",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610eb5380380610eb583398101604081905261002f91610087565b600080546001600160a01b03199081163317909155600180546001600160a01b03948516908316179055600280549290931691161790556100ba565b80516001600160a01b038116811461008257600080fd5b919050565b6000806040838503121561009a57600080fd5b6100a38361006b565b91506100b16020840161006b565b90509250929050565b610dec806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063c78ad77f11610066578063c78ad77f1461021f578063dcbab60814610228578063f7c618c11461023b578063f93804351461024e57600080fd5b80638da5cb5b1461018d578063a87430ba146101a0578063b31f8f9314610203578063b6b55f251461020c57600080fd5b80634ff0876a116100d35780634ff0876a146101395780636ed93dd01461015057806372f702f31461015957806378e979251461018457600080fd5b8063158ef93e146100fa5780632e1a7d4d1461011c578063372500ab14610131575b600080fd5b6008546101079060ff1681565b60405190151581526020015b60405180910390f35b61012f61012a366004610c4b565b610257565b005b61012f610451565b61014260065481565b604051908152602001610113565b61014261271081565b60015461016c906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b61014260055481565b60005461016c906001600160a01b031681565b6101db6101ae366004610c64565b60096020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b6040805194855260208501939093529015159183019190915215156060820152608001610113565b61014260035481565b61012f61021a366004610c4b565b61065f565b61014260045481565b61012f610236366004610c94565b6107d7565b60025461016c906001600160a01b031681565b61014260075481565b33600090815260096020526040902080546102b95760405162461bcd60e51b815260206004820152601560248201527f4e6f20746f6b656e7320746f207769746864726177000000000000000000000060448201526064015b60405180910390fd5b6002810154610100900460ff16156103135760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320616c72656164792077697468647261776e000000000000000060448201526064016102b0565b4260055411156103655760405162461bcd60e51b815260206004820152601660248201527f4661726d696e67206973206e6f7420757020796574210000000000000000000060448201526064016102b0565b600281015460ff166103b95760405162461bcd60e51b815260206004820181905260248201527f596f75206861766520746f20676574207265776172647320617420666972737460448201526064016102b0565b818160000160008282546103cd9190610ce5565b909155505060028101805461ff001916610100179055600380548391906000906103f8908490610cfe565b9091555050600154610414906001600160a01b031633846108ec565b60408051338152602081018490527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5910160405180910390a15050565b33600090815260096020526040902080546104ae5760405162461bcd60e51b815260206004820152601060248201527f4e6f20746f6b656e73207374616b65640000000000000000000000000000000060448201526064016102b0565b600281015460ff16156105035760405162461bcd60e51b815260206004820152601760248201527f5265776172647320616c726561647920636c61696d656400000000000000000060448201526064016102b0565b60008160010154426105159190610ce5565b90506000600654826105279190610d11565b9050600081116105795760405162461bcd60e51b815260206004820152601460248201527f4e6f2065706f636873207061737365642079657400000000000000000000000060448201526064016102b0565b6007548111156105cb5760405162461bcd60e51b815260206004820152601760248201527f4d6178696d756d2065706f63687320657863656564656400000000000000000060448201526064016102b0565b60006127108260045486600001546105e39190610d33565b6105ed9190610d33565b6105f79190610d11565b600254909150610611906001600160a01b031633836108ec565b60028401805460ff1916600117905560408051338152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a150505050565b4260055411156106b15760405162461bcd60e51b815260206004820152601660248201527f4661726d696e67206973206e6f7420757020796574210000000000000000000060448201526064016102b0565b6003548111156107035760405162461bcd60e51b815260206004820152601b60248201527f546f6f206d616e7920746f6b656e7320636f6e7472696275746564000000000060448201526064016102b0565b6040805160808101825282815242602080830191825260008385018181526060850182815233835260099093529481209351845591516001840155925160029092018054935115156101000261ff00199315159390931661ffff1990941693909317919091179091556003805483929061077e908490610ce5565b909155505060015461079b906001600160a01b0316333084610981565b60408051338152602081018390527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910160405180910390a150565b6000546001600160a01b031633146108315760405162461bcd60e51b815260206004820152600c60248201527f4e6f7420616e206f776e6572000000000000000000000000000000000000000060448201526064016102b0565b60085460ff16156108845760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a65640000000000000000000000000060448201526064016102b0565b6008805460ff19166001179055600385905560048490556005819055600782905560068390556108e53330612710856108bd898b610d33565b6108c79190610d33565b6108d19190610d11565b6002546001600160a01b0316929190610981565b5050505050565b6040516001600160a01b03831660248201526044810182905261097c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526109bf565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526109b99085906323b872dd60e01b90608401610918565b50505050565b6000610a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aa49092919063ffffffff16565b80519091501561097c5780806020019051810190610a329190610d4a565b61097c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102b0565b6060610ab38484600085610abb565b949350505050565b606082471015610b335760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102b0565b600080866001600160a01b03168587604051610b4f9190610d90565b60006040518083038185875af1925050503d8060008114610b8c576040519150601f19603f3d011682016040523d82523d6000602084013e610b91565b606091505b5091509150610ba287838387610bad565b979650505050505050565b60608315610c1c578251600003610c15576001600160a01b0385163b610c155760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b0565b5081610ab3565b610ab38383815115610c315781518083602001fd5b8060405162461bcd60e51b81526004016102b09190610dac565b600060208284031215610c5d57600080fd5b5035919050565b600060208284031215610c7657600080fd5b81356001600160a01b0381168114610c8d57600080fd5b9392505050565b600080600080600060a08688031215610cac57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610cf857610cf8610ccf565b92915050565b80820180821115610cf857610cf8610ccf565b600082610d2e57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610cf857610cf8610ccf565b600060208284031215610d5c57600080fd5b81518015158114610c8d57600080fd5b60005b83811015610d87578181015183820152602001610d6f565b50506000910152565b60008251610da2818460208701610d6c565b9190910192915050565b6020815260008251806020840152610dcb816040850160208701610d6c565b601f01601f1916919091016040019291505056fea164736f6c6343000811000a";

type FarmingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FarmingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Farming__factory extends ContractFactory {
  constructor(...args: FarmingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Farming> {
    return super.deploy(
      _stakingToken,
      _rewardToken,
      overrides || {}
    ) as Promise<Farming>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardToken,
      overrides || {}
    );
  }
  override attach(address: string): Farming {
    return super.attach(address) as Farming;
  }
  override connect(signer: Signer): Farming__factory {
    return super.connect(signer) as Farming__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FarmingInterface {
    return new utils.Interface(_abi) as FarmingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Farming {
    return new Contract(address, _abi, signerOrProvider) as Farming;
  }
}
